@page "/users"
@using UserAccessSystem.Contract.Dtos
@using UserAccessSystem.Contract.Requests
@using UserAccessSystem.Contract.Clients
@inject ApiClient ApiClient
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

<PageTitle>Users Management</PageTitle>

<div class="container">
    <h1>Users</h1>

    <div class="mb-3">
        <button class="btn btn-primary" @onclick="ShowCreateDialog">
            Create User
        </button>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!_users.Any())
    {
        <p>No users found.</p>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Username</th>
                        <th>Email</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in _users)
                    {
                        <tr>
                            <td>
                                <ComponentHyperLink Text="@user.Username" ElementType="user" ElementId="@user.Id" />
                            </td>
                            <td>@user.Email</td>
                            <td>
                                <div class="btn-group">
                                    <button class="btn btn-primary btn-sm" @onclick="() => ShowEditDialog(user)">
                                        Edit
                                    </button>
                                    <button class="btn btn-info btn-sm" @onclick="() => ShowUserPermissionsDialog(user)">
                                        View Details
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }

    @if (_errorMessage != null)
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @_errorMessage
            <button type="button" class="btn-close" @onclick="() => _errorMessage = null"></button>
        </div>
    }
</div>

@if (_showCreateDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create User</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="username" @bind="_username">
                    </div>
                    <div class="mb-3">
                        <label for="email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="email" @bind="_email">
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input type="password" class="form-control" id="password" @bind="_password">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateUser">Create</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showEditDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Edit User</h5>
                    <button type="button" class="btn-close" @onclick="HideEditDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="edit-username" class="form-label">Username</label>
                        <input type="text" class="form-control" id="edit-username" @bind="_username">
                    </div>
                    <div class="mb-3">
                        <label for="edit-email" class="form-label">Email</label>
                        <input type="email" class="form-control" id="edit-email" @bind="_email">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideEditDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="UpdateUser">Save</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showPermissionsDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">User Details - @_selectedUser?.Username</h5>
                    <button type="button" class="btn btn-primary me-2" @onclick="ShowAddPermissionDialog">
                        Add Permission
                    </button>
                    <button type="button" class="btn-close" @onclick="HidePermissionsDialog"></button>
                </div>
                <div class="modal-body">
                    <ul class="nav nav-tabs mb-3">
                        <li class="nav-item">
                            <button class="nav-link @(_activeTab == "permissions" ? "active" : "")" 
                                    @onclick='() => _activeTab = "permissions"'>
                                Permissions
                            </button>
                        </li>
                        <li class="nav-item">
                            <button class="nav-link @(_activeTab == "groups" ? "active" : "")" 
                                    @onclick='() => _activeTab = "groups"'>
                                Groups
                            </button>
                        </li>
                    </ul>

                    @if (_activeTab == "permissions")
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Permission Name</th>
                                        <th>Description</th>
                                        <th>Source</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var permission in _userPermissions)
                                    {
                                        <tr>
                                            <td>@permission.Name</td>
                                            <td>@permission.Description</td>
                                            <td>
                                                @if (permission.SourceGroupId.HasValue)
                                                {
                                                    var group = _userGroups.FirstOrDefault(g => g.Id == permission.SourceGroupId);
                                                    <span class="badge bg-info">
                                                        Via Group: @(group?.Name ?? "Unknown Group")
                                                    </span>
                                                }
                                                else
                                                {
                                                    <span class="badge bg-secondary">Direct Permission</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!permission.SourceGroupId.HasValue)
                                                {
                                                    <button class="btn btn-danger btn-sm" 
                                                            @onclick="() => RemovePermissionFromUser(permission.Id, Guid.Empty)">
                                                        Remove
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                    else
                    {
                        <div class="table-responsive">
                            <table class="table table-sm">
                                <thead>
                                    <tr>
                                        <th>Group Name</th>
                                        <th>Description</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var group in _userGroups)
                                    {
                                        <tr>
                                            <td>
                                                <ComponentHyperLink Text="@group.Name" ElementType="group" ElementId="@group.Id" />
                                            </td>
                                            <td>@group.Description</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HidePermissionsDialog">Close</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@if (_showAddPermissionDialog)
{
    <div class="modal fade show" style="display: block" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Permission</h5>
                    <button type="button" class="btn-close" @onclick="HideAddPermissionDialog"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="permission" class="form-label">Select Permission</label>
                        <select class="form-select" id="permission" @bind="_selectedPermissionId">
                            <option value="">-- Select Permission --</option>
                            @foreach (var permission in _availablePermissions)
                            {
                                <option value="@permission.Id">@permission.Name</option>
                            }
                        </select>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideAddPermissionDialog">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="AddPermissionToUser">Add</button>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? OpenUser { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? OpenGroup { get; set; }

    private bool isLoading = true;
    private IEnumerable<UserDto> _users = Array.Empty<UserDto>();
    private string? _errorMessage;
    private bool _showCreateDialog;
    private bool _showEditDialog;
    private bool _showPermissionsDialog;
    private bool _showAddPermissionDialog;
    private string _activeTab = "permissions";

    private string _username = string.Empty;
    private string _email = string.Empty;
    private string _password = string.Empty;
    private Guid _selectedUserId;
    private UserDto? _selectedUser;
    private Guid _selectedPermissionId;
    private Guid _selectedGroupId;
    private IEnumerable<PermissionDto> _availablePermissions = Array.Empty<PermissionDto>();
    private IEnumerable<PermissionDto> _userPermissions = Array.Empty<PermissionDto>();
    private IEnumerable<GroupSimpleDto> _userGroups = Array.Empty<GroupSimpleDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            await LoadUsers();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUsers()
    {
        var response = await ApiClient.GetAsync<IEnumerable<UserDto>>("users");
        if (response.Success)
        {
            _users = response.Data;
            _errorMessage = null;
        }
        else
        {
            _users = Array.Empty<UserDto>();
            _errorMessage = response.Message ?? "Failed to load users";
        }
    }

    private void ShowCreateDialog()
    {
        _username = string.Empty;
        _email = string.Empty;
        _password = string.Empty;
        _showCreateDialog = true;
        _errorMessage = null;
    }

    private void HideCreateDialog()
    {
        _showCreateDialog = false;
        _errorMessage = null;
    }

    private void ShowEditDialog(UserDto user)
    {
        _selectedUserId = user.Id;
        _username = user.Username;
        _email = user.Email;
        _showEditDialog = true;
        _errorMessage = null;
    }

    private void HideEditDialog()
    {
        _showEditDialog = false;
        _errorMessage = null;
    }

    private async Task CreateUser()
    {
        if (string.IsNullOrEmpty(_username) || _username.Length > 20 ||
            string.IsNullOrEmpty(_email) || _email.Length > 60 ||
            string.IsNullOrEmpty(_password) || _password.Length > 60)
        {
            _errorMessage = "Please check the input fields length and ensure they are not empty";
            return;
        }

        var request = new CreateUserRequest
        {
            Username = _username,
            Email = _email,
            Password = _password
        };

        var response = await ApiClient.PostAsync<UserDto>("users", request);
        if (response.Success)
        {
            await LoadUsers();
            HideCreateDialog();
        }
        else
        {
            _errorMessage = response.Message ?? "Failed to create user";
        }
    }

    private async Task UpdateUser()
    {
        var request = new UpdateUserRequest
        {
            Username = _username,
            Email = _email
        };

        var response = await ApiClient.PutAsync<bool>($"users/{_selectedUserId}", request);
        if (response.Success)
        {
            await LoadUsers();
            HideEditDialog();
        }
        else
        {
            _errorMessage = response.Message ?? "Failed to update user";
        }
    }

    private async Task LoadUserDetails(Guid userId)
    {
        var response = await ApiClient.GetAsync<UserDto>($"users/{userId}");
        if (response.Success)
        {
            _selectedUser = response.Data;
            _userGroups = _selectedUser.Groups ?? Array.Empty<GroupSimpleDto>();
            _errorMessage = null;
        }
        else
        {
            _errorMessage = response.Message ?? "Failed to load user details";
        }
    }

    private async Task ShowUserPermissionsDialog(UserDto user)
    {
        _selectedUser = user;
        _selectedUserId = user.Id;
        _showPermissionsDialog = true;
        _activeTab = "permissions";
        
        await LoadUserDetails(user.Id);
        await Task.WhenAll(
            LoadUserPermissions(),
            LoadUserGroups()
        );
    }

    private void HidePermissionsDialog()
    {
        _showPermissionsDialog = false;
        _selectedUser = null;
        _userPermissions = Array.Empty<PermissionDto>();
        _userGroups = Array.Empty<GroupSimpleDto>();
    }

    private async Task LoadUserPermissions()
    {
        var response = await ApiClient.GetAsync<IEnumerable<PermissionDto>>($"users/permissions?userId={_selectedUserId}");
        if (response.Success)
        {
            _userPermissions = response.Data;
            _errorMessage = null;
        }
        else
        {
            _userPermissions = Array.Empty<PermissionDto>();
            _errorMessage = response.Message;
        }
    }

    private async Task LoadUserGroups()
    {
        var response = await ApiClient.GetAsync<IEnumerable<GroupSimpleDto>>($"users/{_selectedUserId}/groups");
        if (response.Success)
        {
            _userGroups = response.Data;
        }
        else
        {
            _userGroups = Array.Empty<GroupSimpleDto>();
            _errorMessage = response.Message;
        }
    }

    private async Task AddPermissionToUser()
    {
        if (_selectedPermissionId == Guid.Empty)
        {
            _errorMessage = "Please select a permission";
            return;
        }
        if (_selectedGroupId == Guid.Empty)
        {
            _errorMessage = "Please select a group";
            return;
        }

        var request = new AddUserPermissionRequest
        {
            UserId = _selectedUserId,
            PermissionId = _selectedPermissionId,
            GroupId = _selectedGroupId
        };

        var response = await ApiClient.PostAsync<bool>("users/permission", request);
        if (response.Success)
        {
            await LoadUserPermissions();
            _selectedPermissionId = Guid.Empty;
            _selectedGroupId = Guid.Empty;
            _errorMessage = null;
        }
        else
        {
            _errorMessage = response.Message ?? "Failed to add permission";
        }
    }

    private async Task RemovePermissionFromUser(Guid permissionId, Guid groupId)
    {
        if (!await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to remove this permission?"))
        {
            return;
        }

        var request = new AddUserPermissionRequest
        {
            UserId = _selectedUserId,
            PermissionId = permissionId,
            GroupId = groupId
        };

        var response = await ApiClient.DeleteAsync<bool>($"users/permission?userId={_selectedUserId}&permissionId={permissionId}&groupId={groupId}");
        if (response.Success)
        {
            await LoadUserPermissions();
            _errorMessage = null;
        }
        else
        {
            _errorMessage = response.Message ?? "Failed to remove permission";
        }
    }

    private async Task ShowAddPermissionDialog()
    {
        _showAddPermissionDialog = true;
        var response = await ApiClient.GetAsync<IEnumerable<PermissionDto>>("permissions");
        if (response.Success)
        {
            _availablePermissions = response.Data;
            _errorMessage = null;
        }
        else
        {
            _availablePermissions = Array.Empty<PermissionDto>();
            _errorMessage = response.Message ?? "Failed to load available permissions";
        }
    }

    private void HideAddPermissionDialog()
    {
        _showAddPermissionDialog = false;
        _selectedPermissionId = Guid.Empty;
        _errorMessage = null;
    }

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        
        if (!string.IsNullOrEmpty(OpenUser) && Guid.TryParse(OpenUser, out Guid userId))
        {
            var user = _users.FirstOrDefault(u => u.Id == userId);
            if (user != null)
            {
                await ShowUserPermissionsDialog(user);
                NavigationManager.NavigateTo(NavigationManager.Uri.Split('?')[0], replace: true);
            }
        }

        if (!string.IsNullOrEmpty(OpenGroup) && Guid.TryParse(OpenGroup, out Guid groupId))
        {
            // Navigate to groups page with the group opened
            NavigationManager.NavigateTo($"/groups?OpenGroup={groupId}");
        }
    }
}
